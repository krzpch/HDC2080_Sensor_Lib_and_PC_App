        -:    0:Source:../../CLI/Cfg/cli_hdc2080.c
        -:    0:Graph:test-obj/../..//CLI/Cfg/cli_hdc2080.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include "cli_hdc2080.h"
        -:    2:#include "HDC2080.h"
        -:    3:#include "usart.h"
        -:    4:#include "i2c.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#if (TARGET == HDC2080_F407)
        -:   10:#define UART_HANDLER    (&huart4)
        -:   11:#define I2C_HANDLER     (&hi2c1)
        -:   12:#endif
        -:   13:
        -:   14:#if (TARGET == HDC2080_F407)
        -:   15:#define my_printf(X, Y...)                                     \
        -:   16:    do                                                         \
        -:   17:    {                                                          \
        -:   18:        int len = snprintf(NULL, 0, X, ##Y);                   \
        -:   19:        char *data = (char *)malloc((len + 1) * sizeof(char)); \
        -:   20:        sprintf(data, X, ##Y);                                 \
        -:   21:        CLI_Print(&HDC2080_CLI, data);                         \
        -:   22:        free(data);                                            \
        -:   23:    } while (0)
        -:   24:#else
        -:   25:#define my_printf(X, Y...) printf(X, ##Y)
        -:   26:#endif
        -:   27:
        -:   28:#define CHAR_BUFF_SIZE  (12U)
        -:   29:#define HDC2080_CLI_BUFFER_SIZE (512U)
        -:   30:
        -:   31:static void HDC_hex_to_offset_temp(uint8_t hex, HDC2080_Temperature_Offset_t *offset);
        -:   32:static void HDC_hex_to_offset_hum(uint8_t hex, HDC2080_Humidity_Offset_t *offset);
        -:   33:
        -:   34:static void HDC_CLI_Print(char *c);
        -:   35:static int HDC_CLI_Cmd_Get_Temperature(int argc, char **argv);
        -:   36:static int HDC_CLI_Cmd_Get_Humidity(int argc, char **argv);
        -:   37:static int HDC_CLI_Cmd_Get_Measurements(int argc, char **argv);
        -:   38:static int HDC_CLI_Cmd_Config_Temperature(int argc, char **argv);
        -:   39:static int HDC_CLI_Cmd_Config_Humidity(int argc, char **argv);
        -:   40:static int HDC_CLI_Cmd_Config_Interrupts(int argc, char **argv);
        -:   41:static int HDC_CLI_Cmd_Init(int argc, char **argv);
        -:   42:static int HDC_CLI_Cmd_Deinit(int argc, char **argv);
        -:   43:static int HDC_CLI_Cmd_Force_MEasurement(int argc, char **argv);
        -:   44:static HDC2080_Status_t HDC2080_I2C_Read(uint16_t hdc2080_address, uint16_t hdc2080_reg, uint8_t *data, uint16_t data_size);
        -:   45:static HDC2080_Status_t HDC2080_I2C_Write(uint16_t hdc2080_address, uint16_t hdc2080_reg, uint8_t *data);
        -:   46:
        -:   47:static CLI_Cmd_t HDC2080_Cmds[] =
        -:   48:{
        -:   49:    {.command = "get_temperature",		.cmd_handler = &HDC_CLI_Cmd_Get_Temperature},
        -:   50:    {.command = "get_humidity",			.cmd_handler = &HDC_CLI_Cmd_Get_Humidity},
        -:   51:	{.command = "get_measurements",		.cmd_handler = &HDC_CLI_Cmd_Get_Measurements},
        -:   52:    {.command = "config_temperature",	.cmd_handler = &HDC_CLI_Cmd_Config_Temperature},
        -:   53:    {.command = "config_humidity",		.cmd_handler = &HDC_CLI_Cmd_Config_Humidity},
        -:   54:	{.command = "config_interrupts",	.cmd_handler = &HDC_CLI_Cmd_Config_Interrupts},
        -:   55:	{.command = "sensor_initialize",	.cmd_handler = &HDC_CLI_Cmd_Init},
        -:   56:	{.command = "sensor_deinitialize",	.cmd_handler = &HDC_CLI_Cmd_Deinit},
        -:   57:	{.command = "force_measurement",	.cmd_handler = &HDC_CLI_Cmd_Force_MEasurement}
        -:   58:
        -:   59:};
        -:   60:
        -:   61:static char HDC2080_CLI_Rx_Buffer[HDC2080_CLI_BUFFER_SIZE] = {0};
        -:   62:
        -:   63:CLI_t HDC2080_CLI =
        -:   64:{
        -:   65:    .queue = {.buffer = HDC2080_CLI_Rx_Buffer, .size = HDC2080_CLI_BUFFER_SIZE},
        -:   66:    .func_print = &HDC_CLI_Print,
        -:   67:    .commands = HDC2080_Cmds,
        -:   68:    .commands_nb = sizeof(HDC2080_Cmds) / sizeof(HDC2080_Cmds[0])
        -:   69:};
        -:   70:
        -:   71:static HDC2080_t hdc =
        -:   72:{
        -:   73:    .address = HDC2080_ADDR_GND,
        -:   74:    .I2C_Read = &HDC2080_I2C_Read,
        -:   75:    .I2C_Write = &HDC2080_I2C_Write
        -:   76:};
        -:   77:
    #####:   78:static HDC2080_Status_t HDC2080_I2C_Read(uint16_t hdc2080_address, uint16_t hdc2080_reg, uint8_t *data, uint16_t data_size)
        -:   79:{
    #####:   80:    return (HDC2080_Status_t)HAL_I2C_Mem_Read(I2C_HANDLER, hdc2080_address, hdc2080_reg, 1U , data, data_size, 1000);
        -:   81:}
        -:   82:
    #####:   83:static HDC2080_Status_t HDC2080_I2C_Write(uint16_t hdc2080_address, uint16_t hdc2080_reg, uint8_t *data)
        -:   84:{
    #####:   85:    return (HDC2080_Status_t)HAL_I2C_Mem_Write(I2C_HANDLER, hdc2080_address, hdc2080_reg, 1U, data, 1U, 1000);
        -:   86:}
        -:   87:
    #####:   88:static void HDC_CLI_Print(char *c)
        -:   89:{
    #####:   90:    HAL_UART_Transmit(UART_HANDLER, (uint8_t*)c, 1U, 10U);
    #####:   91:}
        -:   92:
    #####:   93:static int HDC_CLI_Cmd_Get_Temperature(int argc, char **argv)
        -:   94:{
        -:   95:	float temp;
        -:   96:	HDC2080_Status_t ret;
    #####:   97:	ret = HDC2080_Get_Temperature(&hdc, &temp);
    #####:   98:	if(ret == HDC2080_OK)
        -:   99:	{
    #####:  100:        my_printf("TEMP %.1f\n", temp);
        -:  101:	}
        -:  102:	else
        -:  103:	{
    #####:  104:		my_printf("Bad Temp Meas, ECODE: %d\n", ret);
        -:  105:	}
        -:  106:
    #####:  107:    return 1; //TODO
        -:  108:}
        -:  109:
    #####:  110:static int HDC_CLI_Cmd_Get_Humidity(int argc, char **argv)
        -:  111:{
        -:  112:	float hum;
        -:  113:	HDC2080_Status_t ret;
    #####:  114:	ret = HDC2080_Get_Humidity(&hdc, &hum);
    #####:  115:	if (ret == HDC2080_OK) {
    #####:  116:		my_printf("HUM %.1f\n", hum);
        -:  117:	} else {
    #####:  118:		my_printf("Bad Hum Meas, ECODE: %d\n", ret);
        -:  119:	}
    #####:  120:    return 1; //TODO
        -:  121:}
        -:  122:
    #####:  123:static int HDC_CLI_Cmd_Get_Measurements(int argc, char **argv)
        -:  124:{
        -:  125:	HDC2080_Status_t ret;
        -:  126:	float temp;
        -:  127:	float hum;
        -:  128:
    #####:  129:	ret = HDC2080_Get_Temperature_Humidity(&hdc, &temp, &hum);
    #####:  130:	if (ret == HDC2080_OK) {
    #####:  131:		my_printf("TEMP %.1f\nHUM %.1f\n", temp, hum);
        -:  132:	} else {
    #####:  133:		my_printf("HDC2080_Get_Temperature_Humidity, ECODE: %d\n", ret);
        -:  134:	}
    #####:  135:    return 1; //TODO
        -:  136:}
        -:  137:
    #####:  138:static int HDC_CLI_Cmd_Config_Temperature(int argc, char **argv)
        -:  139:{
        -:  140:	HDC2080_Status_t ret;
    #####:  141:	uint8_t offset = 0x00;
    #####:  142:	HDC2080_Temperature_Offset_t temp_offset = {0};
        -:  143:
    #####:  144:	for (int i = 1; i < argc; i++)
        -:  145:	{
    #####:  146:		if (0U == strcmp(argv[i], "res9bit"))
        -:  147:		{
    #####:  148:			ret = HDC2080_Set_Temperature_Resolution(&hdc, HDC2080_Temperature_Resolution_9_bit);
    #####:  149:			if (ret == HDC2080_OK) {
    #####:  150:				my_printf("res9bit OK\n");
        -:  151:			} else {
    #####:  152:				my_printf("res9bit ECODE: %d\n", ret);
        -:  153:			}
        -:  154:		}
    #####:  155:		else if (0U == strcmp(argv[i], "res11bit"))
        -:  156:		{
    #####:  157:			ret = HDC2080_Set_Temperature_Resolution(&hdc, HDC2080_Temperature_Resolution_11_bit);
    #####:  158:			if (ret == HDC2080_OK) {
    #####:  159:				my_printf("res11bit OK\n");
        -:  160:			} else {
    #####:  161:				my_printf("res11bit ECODE: %d\n", ret);
        -:  162:			}
        -:  163:		}
    #####:  164:		else if (0U == strcmp(argv[i], "res14bit"))
        -:  165:		{
    #####:  166:			ret = HDC2080_Set_Temperature_Resolution(&hdc, HDC2080_Temperature_Resolution_14_bit);
    #####:  167:			if (ret == HDC2080_OK) {
    #####:  168:				my_printf("res14bit OK\n");
        -:  169:			} else {
    #####:  170:				my_printf("res14bit ECODE: %d\n", ret);
        -:  171:			}
        -:  172:		}
    #####:  173:		else if (0U == strcmp(argv[i], "temp_offset"))
        -:  174:		{
    #####:  175:			offset = strtol(argv[++i], NULL, 16);
    #####:  176:			HDC_hex_to_offset_temp(offset, &temp_offset);
    #####:  177:			ret = HDC2080_Set_Temperature_Offset(&hdc, &temp_offset);
        -:  178:
    #####:  179:			if (ret == HDC2080_OK)
        -:  180:			{
    #####:  181:				my_printf("temp_offset OK, offset: %x\n",offset);
        -:  182:			}
        -:  183:			else
        -:  184:			{
    #####:  185:				my_printf("temp_offset ECODE: %d, offset: %x\n", ret, offset);
        -:  186:			}
        -:  187:		}
        -:  188:		else
        -:  189:		{
    #####:  190:			my_printf("Bad argument: %s\n",argv[i]);
        -:  191:		}
        -:  192:	}
        -:  193:
    #####:  194:    return 1; // TODO
        -:  195:}
        -:  196:
    #####:  197:static int HDC_CLI_Cmd_Config_Humidity(int argc, char **argv)
        -:  198:{
        -:  199:	HDC2080_Status_t ret;
    #####:  200:	uint8_t offset = 0x00;
    #####:  201:	HDC2080_Humidity_Offset_t temp_offset = {0};
        -:  202:
    #####:  203:	for (int i = 1; i < argc; i++)
        -:  204:	{
    #####:  205:		if (0U == strcmp(argv[i], "res9bit"))
        -:  206:		{
    #####:  207:			ret = HDC2080_Set_Humidity_Resolution(&hdc, HDC2080_Temperature_Resolution_9_bit);
    #####:  208:			if (ret == HDC2080_OK) {
    #####:  209:				my_printf("res9bit OK\n");
        -:  210:			} else {
    #####:  211:				my_printf("res9bit ECODE: %d\n", ret);
        -:  212:			}
        -:  213:		}
    #####:  214:		else if (0U == strcmp(argv[i], "res11bit"))
        -:  215:		{
    #####:  216:			ret = HDC2080_Set_Humidity_Resolution(&hdc, HDC2080_Temperature_Resolution_11_bit);
    #####:  217:			if (ret == HDC2080_OK) {
    #####:  218:				my_printf("res11bit OK\n");
        -:  219:			} else {
    #####:  220:				my_printf("res11bit ECODE: %d\n", ret);
        -:  221:			}
        -:  222:		}
    #####:  223:		else if (0U == strcmp(argv[i], "res14bit"))
        -:  224:		{
    #####:  225:			ret = HDC2080_Set_Humidity_Resolution(&hdc, HDC2080_Temperature_Resolution_14_bit);
    #####:  226:			if (ret == HDC2080_OK) {
    #####:  227:				my_printf("res14bit OK\n");
        -:  228:			} else {
    #####:  229:				my_printf("res14bit ECODE: %d\n", ret);
        -:  230:			}
        -:  231:		}
    #####:  232:		else if (0U == strcmp(argv[i], "hum_offset"))
        -:  233:		{
    #####:  234:			offset = strtol(argv[++i], NULL, 16);
    #####:  235:			HDC_hex_to_offset_hum(offset, &temp_offset);
    #####:  236:			ret = HDC2080_Set_Humidity_Offset(&hdc, &temp_offset);
        -:  237:
    #####:  238:			if (ret == HDC2080_OK)
        -:  239:			{
    #####:  240:				my_printf("hum_offset OK, offset: %x\n",offset);
        -:  241:			}
        -:  242:			else
        -:  243:			{
    #####:  244:				my_printf("hum_offset ECODE: %d, offset: %x\n", ret, offset);
        -:  245:			}
        -:  246:		}
        -:  247:		else
        -:  248:		{
    #####:  249:			my_printf("Bad argument: %s\n",argv[i]);
        -:  250:		}
        -:  251:	}
    #####:  252:    return 1;
        -:  253:}
        -:  254:
    #####:  255:static int HDC_CLI_Cmd_Init(int argc, char **argv)
        -:  256:{
        -:  257:	HDC2080_Status_t ret;
    #####:  258:	ret = HDC2080_Soft_Reset(&hdc);
    #####:  259:	if (ret == HDC2080_OK) {
    #####:  260:		my_printf("softRes OK\n");
        -:  261:	} else {
    #####:  262:		my_printf("softRes ECODE: %d\n", ret);
        -:  263:	}
        -:  264:
    #####:  265:	for (int i = 1; i < argc; i++)
        -:  266:	{
    #####:  267:		if (0U == strcmp(argv[i], "temp&hum"))
        -:  268:		{
    #####:  269:	        ret = HDC2080_Set_Measurement_Configuration(&hdc, HDC2080_Measurement_Configuration_Humidity_Temperature);
    #####:  270:			if (ret == HDC2080_OK) {
    #####:  271:				my_printf("temp&hum OK\n");
        -:  272:			} else {
    #####:  273:				my_printf("temp&hum ECODE: %d\n", ret);
        -:  274:			}
        -:  275:		}
    #####:  276:		else if (0U == strcmp(argv[i], "onlyTemp"))
        -:  277:		{
    #####:  278:	        ret = HDC2080_Set_Measurement_Configuration(&hdc, HDC2080_Measurement_Configuration_Temperature);
    #####:  279:			if (ret == HDC2080_OK) {
    #####:  280:				my_printf("onlyTemp OK\n");
        -:  281:			} else {
    #####:  282:				my_printf("onlyTemp ECODE: %d\n", ret);
        -:  283:			}
        -:  284:		}
    #####:  285:		else if (0U == strcmp(argv[i], "autoOff"))
        -:  286:		{
    #####:  287:	        ret = HDC2080_Set_AMM_Rate(&hdc, HDC2080_AMM_Rate_1_Disabled);
    #####:  288:			if (ret == HDC2080_OK) {
    #####:  289:				my_printf("autoOff OK\n");
        -:  290:			} else {
    #####:  291:				my_printf("autoOff ECODE: %d\n", ret);
        -:  292:			}
        -:  293:		}
    #####:  294:		else if (0U == strcmp(argv[i], "1/120Hz"))
        -:  295:		{
    #####:  296:	        ret = HDC2080_Set_AMM_Rate(&hdc, HDC2080_AMM_Rate_1_120Hz);
    #####:  297:			if (ret == HDC2080_OK) {
    #####:  298:				my_printf("120Hz OK\n");
        -:  299:			} else {
    #####:  300:				my_printf("120Hz ECODE: %d\n", ret);
        -:  301:			}
        -:  302:		}
    #####:  303:		else if (0U == strcmp(argv[i], "1/10Hz"))
        -:  304:		{
    #####:  305:	        ret = HDC2080_Set_AMM_Rate(&hdc, HDC2080_AMM_Rate_1_10Hz);
    #####:  306:			if (ret == HDC2080_OK) {
    #####:  307:				my_printf("10Hz OK\n");
        -:  308:			} else {
    #####:  309:				my_printf("10Hz ECODE: %d\n", ret);
        -:  310:			}
        -:  311:		}
    #####:  312:		else if (0U == strcmp(argv[i], "1Hz"))
        -:  313:		{
    #####:  314:	        ret = HDC2080_Set_AMM_Rate(&hdc, HDC2080_AMM_Rate_1Hz);
    #####:  315:			if (ret == HDC2080_OK) {
    #####:  316:				my_printf("1Hz OK\n");
        -:  317:			} else {
    #####:  318:				my_printf("1Hz ECODE: %d\n", ret);
        -:  319:			}
        -:  320:		}
    #####:  321:		else if (0U == strcmp(argv[i], "5Hz"))
        -:  322:		{
    #####:  323:			ret = HDC2080_Set_AMM_Rate(&hdc, HDC2080_AMM_Rate_5Hz);
    #####:  324:			if (ret == HDC2080_OK) {
    #####:  325:				my_printf("5Hz OK\n");
        -:  326:			} else {
    #####:  327:				my_printf("5Hz ECODE: %d\n", ret);
        -:  328:			}
        -:  329:		}
        -:  330:		else
        -:  331:		{
    #####:  332:			my_printf("Bad argument: %s\n",argv[i]);
        -:  333:		}
        -:  334:	}
        -:  335:
    #####:  336:	return 1;
        -:  337:}
        -:  338:
    #####:  339:static int HDC_CLI_Cmd_Config_Interrupts(int argc, char **argv)
        -:  340:{
        -:  341:    HDC2080_Status_t ret;
    #####:  342:    HDC2080_INT_Pin_Configuration_t interrupt_pin = {
        -:  343:        .pin = HDC2080_Pin_Configuration_High_Z,
        -:  344:        .polarity = HDC2080_Pin_Configuration_Active_Low,
        -:  345:        .mode = HDC2080_Pin_Configuration_Level_Sensitive,
        -:  346:    };
    #####:  347:    HDC2080_Interrupts_t interrupt_cfg =
        -:  348:        {.dataready = HDC2080_Interrupt_State_Disabled,
        -:  349:         .temperature_thr_high = HDC2080_Interrupt_State_Disabled,
        -:  350:         .temperature_thr_low = HDC2080_Interrupt_State_Disabled,
        -:  351:         .humidity_thr_high = HDC2080_Interrupt_State_Disabled,
        -:  352:         .humidity_thr_low = HDC2080_Interrupt_State_Disabled};
        -:  353:    float val;
        -:  354:
    #####:  355:	for (int i = 1; i < argc; i++)
        -:  356:	{
    #####:  357:		if (0U == strcmp(argv[i], "intDataReadyEn"))
        -:  358:		{
    #####:  359:	        interrupt_cfg.dataready = HDC2080_Interrupt_State_Enabled;
    #####:  360:	        my_printf("intDataReadyEn OK\n");
        -:  361:		}
    #####:  362:		else if (0U == strcmp(argv[i], "intTempMaxEn"))
        -:  363:		{
    #####:  364:			interrupt_cfg.temperature_thr_high = HDC2080_Interrupt_State_Enabled;
    #####:  365:			val = (float) atof(argv[++i]);
    #####:  366:			ret = HDC2080_Set_Temperature_Threshold_High(&hdc, val);
    #####:  367:			if (ret == HDC2080_OK)
        -:  368:			{
    #####:  369:				my_printf("intTempMaxEn OK, float: %.1f\n", val);
        -:  370:			}
        -:  371:			else
        -:  372:			{
    #####:  373:				my_printf("intTempMaxEn ECODE: %d, float: %.1f\n", ret, val);
        -:  374:			}
        -:  375:
        -:  376:		}
    #####:  377:		else if (0U == strcmp(argv[i], "intTempMinEn"))
        -:  378:		{
    #####:  379:			interrupt_cfg.temperature_thr_low = HDC2080_Interrupt_State_Enabled;
    #####:  380:			val = (float) atof(argv[++i]);
    #####:  381:			ret = HDC2080_Set_Temperature_Threshold_Low(&hdc, val);
    #####:  382:			if (ret == HDC2080_OK)
        -:  383:			{
    #####:  384:				my_printf("intTempMinEn OK, float: %.1f\n", val);
        -:  385:			}
        -:  386:			else
        -:  387:			{
    #####:  388:				my_printf("intTempMinEn ECODE: %d, float: %.1f\n", ret, val);
        -:  389:			}
        -:  390:		}
    #####:  391:		else if (0U == strcmp(argv[i], "intHumMaxEn"))
        -:  392:		{
    #####:  393:			interrupt_cfg.humidity_thr_high = HDC2080_Interrupt_State_Enabled;
    #####:  394:			val = (float) atof(argv[++i]);
    #####:  395:			ret = HDC2080_Set_Humidity_Threshold_High(&hdc, val);
    #####:  396:			if (ret == HDC2080_OK)
        -:  397:			{
    #####:  398:				my_printf("intHumMaxEn OK, float: %.1f\n", val);
        -:  399:			}
        -:  400:			else
        -:  401:			{
    #####:  402:				my_printf("intHumMaxEn ECODE: %d, float: %.1f\n", ret, val);
        -:  403:			}
        -:  404:		}
    #####:  405:		else if (0U == strcmp(argv[i], "intHumMinEn"))
        -:  406:		{
    #####:  407:			interrupt_cfg.humidity_thr_low = HDC2080_Interrupt_State_Enabled;
    #####:  408:			val = (float) atof(argv[++i]);
    #####:  409:			ret = HDC2080_Set_Humidity_Threshold_Low(&hdc, val);
    #####:  410:			if (ret == HDC2080_OK)
        -:  411:			{
    #####:  412:				my_printf("intHumMinEn OK, float: %.1f\n", val);
        -:  413:			}
        -:  414:			else
        -:  415:			{
    #####:  416:				my_printf("intHumMinEn ECODE: %d, float: %.1f\n", ret, val);
        -:  417:			}
        -:  418:		}
    #####:  419:		else if (0U == strcmp(argv[i], "intDis"))
        -:  420:		{
    #####:  421:	        interrupt_pin.pin = HDC2080_Pin_Configuration_High_Z;
    #####:  422:	        my_printf("intDis OK\n");
        -:  423:		}
    #####:  424:		else if (0U == strcmp(argv[i], "intAL"))
        -:  425:		{
    #####:  426:	        interrupt_pin.pin = HDC2080_Pin_Configuration_Enable;
    #####:  427:	        interrupt_pin.polarity = HDC2080_Pin_Configuration_Active_Low;
    #####:  428:	        my_printf("intAL OK\n");
        -:  429:		}
    #####:  430:		else if (0U == strcmp(argv[i], "intAH"))
        -:  431:		{
    #####:  432:	        interrupt_pin.pin = HDC2080_Pin_Configuration_Enable;
    #####:  433:	        interrupt_pin.polarity = HDC2080_Pin_Configuration_Active_High;
    #####:  434:	        my_printf("intAH OK\n");
        -:  435:		}
    #####:  436:		else if (0U == strcmp(argv[i], "levelSens"))
        -:  437:		{
    #####:  438:	        interrupt_pin.mode = HDC2080_Pin_Configuration_Level_Sensitive;
    #####:  439:	        my_printf("levelSens OK\n");
        -:  440:		}
    #####:  441:		else if (0U == strcmp(argv[i], "CompMode"))
        -:  442:		{
    #####:  443:	        interrupt_pin.mode = HDC2080_Pin_Configuration_Comparator_Mode;
    #####:  444:	        my_printf("CompMode OK\n");
        -:  445:		}
        -:  446:		else
        -:  447:		{
    #####:  448:			my_printf("Bad argument: %s\n",argv[i]);
        -:  449:		}
        -:  450:	}
        -:  451:
    #####:  452:	ret = HDC2080_Set_INT_Pin_Configuration(&hdc, &interrupt_pin);
    #####:  453:	my_printf("HDC2080_Set_INT_Pin_Configuration: %d\n", ret);
    #####:  454:	ret = HDC2080_Set_Interrupt_Configuration(&hdc, &interrupt_cfg);
    #####:  455:	my_printf("HDC2080_Set_Interrupt_Configuration: %d\n", ret);
        -:  456:
    #####:  457:	ret = HDC2080_Start_Conversion(&hdc);
    #####:  458:	my_printf("HDC2080_Start_Conversion: %d\n", ret);
        -:  459:
    #####:  460:	return 1;
        -:  461:}
        -:  462:
        -:  463:
    #####:  464:static int HDC_CLI_Cmd_Deinit(int argc, char **argv)
        -:  465:{
        -:  466:	HDC2080_Status_t ret;
    #####:  467:	ret = HDC2080_Soft_Reset(&hdc);
    #####:  468:	my_printf("HDC2080_Soft_Reset: %d\n", ret);
    #####:  469:	return 1;
        -:  470:}
        -:  471:
        -:  472:
    #####:  473:static int HDC_CLI_Cmd_Force_MEasurement(int argc, char **argv)
        -:  474:{
        -:  475:	HDC2080_Status_t ret;
    #####:  476:	ret = HDC2080_Start_Conversion(&hdc);
    #####:  477:	if(ret == HDC2080_OK)
        -:  478:	{
    #####:  479:		my_printf("Measurement Forced OK\n");
        -:  480:	}
        -:  481:	else
        -:  482:	{
    #####:  483:		my_printf("Measurement Forced ECODE: %d\n", ret);
        -:  484:	}
    #####:  485:	return 1;
        -:  486:}
        -:  487:
    #####:  488:static void HDC_hex_to_offset_temp(uint8_t hex, HDC2080_Temperature_Offset_t *offset)
        -:  489:{
    #####:  490:	if ((hex & (1 << 0)) != 0) {
    #####:  491:		offset->of_0_16 = 1;
        -:  492:	}
    #####:  493:	if ((hex & (1 << 1)) != 0) {
    #####:  494:		offset->of_0_32 = 1;
        -:  495:	}
    #####:  496:	if ((hex & (1 << 2)) != 0) {
    #####:  497:		offset->of_0_64 = 1;
        -:  498:	}
    #####:  499:	if ((hex & (1 << 3)) != 0) {
    #####:  500:		offset->of_1_28 = 1;
        -:  501:	}
    #####:  502:	if ((hex & (1 << 4)) != 0) {
    #####:  503:		offset->of_2_58 = 1;
        -:  504:	}
    #####:  505:	if ((hex & (1 << 5)) != 0) {
    #####:  506:		offset->of_5_16 = 1;
        -:  507:	}
    #####:  508:	if ((hex & (1 << 6)) != 0) {
    #####:  509:		offset->of_10_32 = 1;
        -:  510:	}
    #####:  511:	if ((hex & (1 << 7)) != 0) {
    #####:  512:		offset->of_neg_20_32 = 1;
        -:  513:	}
    #####:  514:}
        -:  515:
    #####:  516:static void HDC_hex_to_offset_hum(uint8_t hex, HDC2080_Humidity_Offset_t *offset)
        -:  517:{
    #####:  518:	if ((hex & (1 << 0)) != 0) {
    #####:  519:		offset->of_0_2 = 1;
        -:  520:	}
    #####:  521:	if ((hex & (1 << 1)) != 0) {
    #####:  522:		offset->of_0_4 = 1;
        -:  523:	}
    #####:  524:	if ((hex & (1 << 2)) != 0) {
    #####:  525:		offset->of_0_8 = 1;
        -:  526:	}
    #####:  527:	if ((hex & (1 << 3)) != 0) {
    #####:  528:		offset->of_1_6 = 1;
        -:  529:	}
    #####:  530:	if ((hex & (1 << 4)) != 0) {
    #####:  531:		offset->of_3_1 = 1;
        -:  532:	}
    #####:  533:	if ((hex & (1 << 5)) != 0) {
    #####:  534:		offset->of_6_3 = 1;
        -:  535:	}
    #####:  536:	if ((hex & (1 << 6)) != 0) {
    #####:  537:		offset->of_12_5 = 1;
        -:  538:	}
    #####:  539:	if ((hex & (1 << 7)) != 0) {
    #####:  540:		offset->of_neg_25_0 = 1;
        -:  541:	}
    #####:  542:}
        -:  543:
    #####:  544:int __io_putchar(int ch)
        -:  545:{
    #####:  546:    HDC_CLI_Print((char *)&ch);
    #####:  547:    return ch;
        -:  548:}
